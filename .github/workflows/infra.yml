name: "Terraform"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      infra-action:
        type: choice
        description: Infra action to perform
        options:
        - deploy
        - decomission
  pull_request:

env:
  TF_VAR_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}   # Azure Tenant Subscription ID
  TF_VAR_CLIENT_ID: ${{ secrets.CLIENT_ID }}               # Service Principal App ID
  TF_VAR_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}       # Service Principal Password
  TF_VAR_TENANT_ID: ${{ secrets.TENANT_ID }}               # Azure Tenant ID

jobs:
  deploy:
    name: "Terraform: Deploy Infrastructure"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.infra-action == 'deploy' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  decomission:
    name: "Terraform: Decommission Infrastructure"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.infra-action == 'decomission' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false

